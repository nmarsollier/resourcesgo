package schema

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"

	"github.com/nmarsollier/resourcesgo/graph/model"
	"github.com/nmarsollier/resourcesgo/graph/tools"
	"github.com/nmarsollier/resourcesgo/languages"
	"github.com/nmarsollier/resourcesgo/projects"
	"github.com/nmarsollier/resourcesgo/resources"
)

// NewProject is the resolver for the newProject field.
func (r *mutationResolver) NewProject(ctx context.Context, id string, name string) (string, error) {
	return projects.Create(tools.LoggerFields(ctx), id, name)
}

// NewLanguage is the resolver for the newLanguage field.
func (r *mutationResolver) NewLanguage(ctx context.Context, id string, name string) (string, error) {
	return languages.Create(tools.LoggerFields(ctx), id, name)
}

// NewResource is the resolver for the newResource field.
func (r *mutationResolver) NewResource(ctx context.Context, request model.NewResourceInput) (string, error) {
	return resources.Create(tools.LoggerFields(ctx), resources.NewResource(
		request.ProjectID,
		request.LanguageID,
		request.Semver,
		mapReqValues(request.Values),
	))
}

// DeleteResource is the resolver for the deleteResource field.
func (r *mutationResolver) DeleteResource(ctx context.Context, projectID string, languageID string, semver string) (string, error) {
	resources.Delete(tools.LoggerFields(ctx), projectID, languageID, semver)
	return "OK", nil
}

// GetProject is the resolver for the getProject field.
func (r *queryResolver) GetProject(ctx context.Context, id string) (*model.Project, error) {
	prj, err := projects.FindByID(tools.LoggerFields(ctx), id)
	if err != nil {
		return nil, err
	}

	return &model.Project{
		ID:   prj.ID,
		Name: prj.Name,
	}, nil
}

// GetLanguage is the resolver for the getLanguage field.
func (r *queryResolver) GetLanguage(ctx context.Context, id string) (*model.Language, error) {
	prj, err := languages.FindByID(tools.LoggerFields(ctx), id)
	if err != nil {
		return nil, err
	}

	return &model.Language{
		ID:   prj.ID,
		Name: prj.Name,
	}, nil
}

// GetResource is the resolver for the getResource field.
func (r *queryResolver) GetResource(ctx context.Context, projectID string, languageID string, semver string) (*model.Resource, error) {
	res, err := resources.GetLastResource(tools.LoggerFields(ctx), projectID, languageID, semver)
	if err != nil {
		return nil, err
	}

	return &model.Resource{
		ID:         res.ID,
		ProjectID:  res.ProjectID,
		LanguageID: res.LanguageID,
		Semver:     res.SemVer,
		Values:     mapValues(res.Values),
	}, nil
}

// GetVersions is the resolver for the getVersions field.
func (r *queryResolver) GetVersions(ctx context.Context, projectID string, languageID string) ([]string, error) {
	return resources.FindVersions(tools.LoggerFields(ctx), projectID, languageID)
}

// Mutation returns model.MutationResolver implementation.
func (r *Resolver) Mutation() model.MutationResolver { return &mutationResolver{r} }

// Query returns model.QueryResolver implementation.
func (r *Resolver) Query() model.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
