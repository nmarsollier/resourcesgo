package schema

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"

	"github.com/nmarsollier/resourcesgo/internal/graph/model"
	"github.com/nmarsollier/resourcesgo/internal/graph/tools"
	"github.com/nmarsollier/resourcesgo/internal/languages"
	"github.com/nmarsollier/resourcesgo/internal/projects"
	"github.com/nmarsollier/resourcesgo/internal/resources"
)

// FindLanguageByID is the resolver for the findLanguageByID field.
func (r *entityResolver) FindLanguageByID(ctx context.Context, id string) (*model.Language, error) {
	prj, err := languages.FindByID(tools.LoggerCtx(ctx), id)
	if err != nil {
		return nil, err
	}

	return &model.Language{
		ID:   prj.ID,
		Name: prj.Name,
	}, nil
}

// FindProjectByID is the resolver for the findProjectByID field.
func (r *entityResolver) FindProjectByID(ctx context.Context, id string) (*model.Project, error) {
	prj, err := projects.FindByID(tools.LoggerCtx(ctx), id)
	if err != nil {
		return nil, err
	}

	return &model.Project{
		ID:   prj.ID,
		Name: prj.Name,
	}, nil
}

// FindResourceByID is the resolver for the findResourceByID field.
func (r *entityResolver) FindResourceByID(ctx context.Context, id string) (*model.Resource, error) {
	prj, err := resources.FindByID(tools.LoggerCtx(ctx), id)
	if err != nil {
		return nil, err
	}

	return &model.Resource{
		ID:         prj.ID,
		ProjectID:  prj.ProjectID,
		LanguageID: prj.LanguageID,
		Semver:     prj.SemVer,
		Values:     mapValues(prj.Values),
	}, nil
}

// Entity returns model.EntityResolver implementation.
func (r *Resolver) Entity() model.EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
